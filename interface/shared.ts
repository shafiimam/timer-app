import type { TabProps } from "@shopify/polaris";
import type { TimerStyle, Translation } from "./timer";

export enum CountryCode {
  "AF" = "Afghanistan",
  "AX" = "Aland Islands",
  "AL" = "Albania",
  "DZ" = "Algeria",
  "AS" = "American Samoa",
  "AD" = "Andorra",
  "AO" = "Angola",
  "AI" = "Anguilla",
  "AQ" = "Antarctica",
  "AG" = "Antigua and Barbuda",
  "AR" = "Argentina",
  "AM" = "Armenia",
  "AW" = "Aruba",
  "AU" = "Australia",
  "AT" = "Austria",
  "AZ" = "Azerbaijan",
  "BS" = "Bahamas",
  "BH" = "Bahrain",
  "BD" = "Bangladesh",
  "BB" = "Barbados",
  "BY" = "Belarus",
  "BE" = "Belgium",
  "BZ" = "Belize",
  "BJ" = "Benin",
  "BM" = "Bermuda",
  "BT" = "Bhutan",
  "BO" = "Bolivia",
  "BQ" = "Bonaire, Sint Eustatius and Saba",
  "BA" = "Bosnia and Herzegovina",
  "BW" = "Botswana",
  "BV" = "Bouvet Island",
  "BR" = "Brazil",
  "IO" = "British Indian Ocean Territory",
  "BN" = "Brunei Darussalam",
  "BG" = "Bulgaria",
  "BF" = "Burkina Faso",
  "BI" = "Burundi",
  "CV" = "Cabo Verde",
  "KH" = "Cambodia",
  "CM" = "Cameroon",
  "CA" = "Canada",
  "KY" = "Cayman Islands",
  "CF" = "Central African Republic",
  "TD" = "Chad",
  "CL" = "Chile",
  "CN" = "China",
  "CX" = "Christmas Island",
  "CC" = "Cocos (Keeling) Islands",
  "CO" = "Colombia",
  "KM" = "Comoros",
  "CG" = "Congo",
  "CD" = "Congo, the Democratic Republic of the",
  "CK" = "Cook Islands",
  "CR" = "Costa Rica",
  "CI" = "Cote d'Ivoire",
  "HR" = "Croatia",
  "CU" = "Cuba",
  "CW" = "Curacao",
  "CY" = "Cyprus",
  "CZ" = "Czech Republic",
  "DK" = "Denmark",
  "DJ" = "Djibouti",
  "DM" = "Dominica",
  "DO" = "Dominican Republic",
  "EC" = "Ecuador",
  "EG" = "Egypt",
  "SV" = "El Salvador",
  "GQ" = "Equatorial Guinea",
  "ER" = "Eritrea",
  "EE" = "Estonia",
  "ET" = "Ethiopia",
  "FK" = "Falkland Islands (Malvinas)",
  "FO" = "Faroe Islands",
  "FJ" = "Fiji",
  "FI" = "Finland",
  "FR" = "France",
  "GF" = "French Guiana",
  "PF" = "French Polynesia",
  "TF" = "French Southern Territories",
  "GA" = "Gabon",
  "GM" = "Gambia",
  "GE" = "Georgia",
  "DE" = "Germany",
  "GH" = "Ghana",
  "GI" = "Gibraltar",
  "GR" = "Greece",
  "GL" = "Greenland",
  "GD" = "Grenada",
  "GP" = "Guadeloupe",
  "GU" = "Guam",
  "GT" = "Guatemala",
  "GG" = "Guernsey",
  "GN" = "Guinea",
  "GW" = "Guinea-Bissau",
  "GY" = "Guyana",
  "HT" = "Haiti",
  "HM" = "Heard Island and McDonald Islands",
  "VA" = "Holy See (Vatican City State)",
  "HN" = "Honduras",
  "HK" = "Hong Kong",
  "HU" = "Hungary",
  "IS" = "Iceland",
  "IN" = "India",
  "ID" = "Indonesia",
  "IR" = "Iran, Islamic Republic of",
  "IQ" = "Iraq",
  "IE" = "Ireland",
  "IM" = "Isle of Man",
  "IL" = "Israel",
  "IT" = "Italy",
  "JM" = "Jamaica",
  "JP" = "Japan",
  "JE" = "Jersey",
  "JO" = "Jordan",
  "KZ" = "Kazakhstan",
  "KE" = "Kenya",
  "KI" = "Kiribati",
  "KP" = "Korea, Democratic People's Republic of",
  "KR" = "Korea, Republic of",
  "KW" = "Kuwait",
  "KG" = "Kyrgyzstan",
  "LA" = "Lao People's Democratic Republic",
  "LV" = "Latvia",
  "LB" = "Lebanon",
  "LS" = "Lesotho",
  "LR" = "Liberia",
  "LY" = "Libya",
  "LI" = "Liechtenstein",
  "LT" = "Lithuania",
  "LU" = "Luxembourg",
  "MO" = "Macao",
  "MK" = "Macedonia, the former Yugoslav Republic of",
  "MG" = "Madagascar",
  "MW" = "Malawi",
  "MY" = "Malaysia",
  "MV" = "Maldives",
  "ML" = "Mali",
  "MT" = "Malta",
  "MH" = "Marshall Islands",
  "MQ" = "Martinique",
  "MR" = "Mauritania",
  "MU" = "Mauritius",
  "YT" = "Mayotte",
  "MX" = "Mexico",
  "FM" = "Micronesia, Federated States of",
  "MD" = "Moldova, Republic of",
  "MC" = "Monaco",
  "MN" = "Mongolia",
  "ME" = "Montenegro",
  "MS" = "Montserrat",
  "MA" = "Morocco",
  "MZ" = "Mozambique",
  "MM" = "Myanmar",
  "NA" = "Namibia",
  "NR" = "Nauru",
  "NP" = "Nepal",
  "NL" = "Netherlands",
  "NC" = "New Caledonia",
  "NZ" = "New Zealand",
  "NI" = "Nicaragua",
  "NE" = "Niger",
  "NG" = "Nigeria",
  "NU" = "Niue",
  "NF" = "Norfolk Island",
  "MP" = "Northern Mariana Islands",
  "NO" = "Norway",
  "OM" = "Oman",
  "PK" = "Pakistan",
  "PW" = "Palau",
  "PS" = "Palestinian Territory, Occupied",
  "PA" = "Panama",
  "PG" = "Papua New Guinea",
  "PY" = "Paraguay",
  "PE" = "Peru",
  "PH" = "Philippines",
  "PN" = "Pitcairn",
  "PL" = "Poland",
  "PT" = "Portugal",
  "PR" = "Puerto Rico",
  "QA" = "Qatar",
  "RE" = "Reunion",
  "RO" = "Romania",
  "RU" = "Russian Federation",
  "RW" = "Rwanda",
  "BL" = "Saint Barthelemy",
  "SH" = "Saint Helena, Ascension and Tristan da Cunha",
  "KN" = "Saint Kitts and Nevis",
  "LC" = "Saint Lucia",
  "MF" = "Saint Martin (French part)",
  "PM" = "Saint Pierre and Miquelon",
  "VC" = "Saint Vincent and the Grenadines",
  "WS" = "Samoa",
  "SM" = "San Marino",
  "ST" = "Sao Tome and Principe",
  "SA" = "Saudi Arabia",
  "SN" = "Senegal",
  "RS" = "Serbia",
  "SC" = "Seychelles",
  "SL" = "Sierra Leone",
  "SG" = "Singapore",
  "SX" = "Sint Maarten (Dutch part)",
  "SK" = "Slovakia",
  "SI" = "Slovenia",
  "SB" = "Solomon Islands",
  "SO" = "Somalia",
  "ZA" = "South Africa",
  "GS" = "South Georgia and the South Sandwich Islands",
  "SS" = "South Sudan",
  "ES" = "Spain",
  "LK" = "Sri Lanka",
  "SD" = "Sudan",
  "SR" = "Suriname",
  "SJ" = "Svalbard and Jan Mayen",
  "SZ" = "Swaziland",
  "SE" = "Sweden",
  "CH" = "Switzerland",
  "SY" = "Syrian Arab Republic",
  "TW" = "Taiwan, Province of China",
  "TJ" = "Tajikistan",
  "TZ" = "Tanzania, United Republic of",
  "TH" = "Thailand",
  "TL" = "Timor-Leste",
  "TG" = "Togo",
  "TK" = "Tokelau",
  "TO" = "Tonga",
  "TT" = "Trinidad and Tobago",
  "TN" = "Tunisia",
  "TR" = "Turkey",
  "TM" = "Turkmenistan",
  "TC" = "Turks and Caicos Islands",
  "TV" = "Tuvalu",
  "UG" = "Uganda",
  "UA" = "Ukraine",
  "AE" = "United Arab Emirates",
  "GB" = "United Kingdom",
  "US" = "United States",
  "UM" = "United States Minor Outlying Islands",
  "UY" = "Uruguay",
  "UZ" = "Uzbekistan",
  "VU" = "Vanuatu",
  "VE" = "Venezuela, Bolivarian Republic of",
  "VN" = "Viet Nam",
  "VG" = "Virgin Islands, British",
  "VI" = "Virgin Islands, U.S.",
  "WF" = "Wallis and Futuna",
  "EH" = "Western Sahara",
  "YE" = "Yemen",
  "ZM" = "Zambia",
  "ZW" = "Zimbabwe",
}

export enum TimerTemplate {
  "custom" = "Custom",
  "dawn" = "Dawn",
  "electric" = "Electric",
  "forest" = "Forest",
  "vibrant" = "Vibrant",
  "neon" = "Neon",
  "vanilla" = "Vanilla",
  "love" = "Love",
  "earth" = "Earth",
  "valentine" = "Valentine",
  "bubble-gum" = "Bubble Gum",
  "black-yellow" = "Black Yellow",
  "sophisticated" = "Sophisticated",
  "fire" = "Fire",
  "frost" = "Frost",
  "sunny-evening" = "Sunny Evening",
  "read-moon" = "Read Moon",
  "sunny-ocean" = "Sunny Ocean",
  "minmimal" = "Minimal",
}

export enum SupportedTranslationLanguage {
  "en" = "English",
  "ar" = "Arabic",
  "es" = "Spanish",
  "de" = "German",
  "fr" = "French",
  "ja" = "Japanese",
  "ko" = "Korean",
  "ru" = "Russian",
  "zh" = "Chinese",
}

export enum DateAMPM {
  "AM" = "AM",
  "PM" = "PM",
}

export enum OnceEndsTimer {
  "Unpublish Timer" = "unpublish",
  "Show Custom Title" = "show-custom-title",
  "Do Nothing" = "do-nothing",
}
export type OnceEndsTimerValue =
  | "unpublish"
  | "show-custom-title"
  | "do-nothing";

export enum DaysOfWeeks {
  "Sunday" = 0,
  "Monday" = 1,
  "Tuesday" = 2,
  "Wednesday" = 3,
  "Thursday" = 4,
  "Friday" = 5,
  "Saturday" = 6,
}

export enum ReccuringTimerEndsOptions {
  "Never Ends" = "never",
  "Specific Date" = "specific-date",
}

export enum ReccuringTimerStartOptions {
  "Today" = "today",
  "Specific Date" = "specific-date",
}

export enum TimerStyleFontOptions {
  "Helvetica" = "helvetica",
  "Tahoma" = "tahoma",
  "Trebuchet MS" = "trebuchet-ms",
  "Times New Roman" = "times-new-roman",
  "Georgia" = "georgia",
  "Garamond" = "garamond",
  "Courier New" = "courier-new",
}

type IAppDefaultData = {
  tabs: TabProps[];
  languageOptions: {
    label: string;
    value: keyof typeof SupportedTranslationLanguage;
  }[];
  onceTimerEndsOptions: {
    label: keyof typeof OnceEndsTimer;
    value: OnceEndsTimerValue;
  }[];
  daysOfWeekOptions: { label: string; value: number }[];
  timerTemplateOptions: {
    label: string;
    value: keyof typeof TimerTemplate;
  }[];
  recurringTimerEndsOptions: {
    label: keyof typeof ReccuringTimerEndsOptions;
    value: string;
  }[];
  recurringTimerStartOptions: {
    value: string;
    label: keyof typeof ReccuringTimerStartOptions;
  }[];
  defaultTranslationLanguageState: Translation;
  style: TimerStyle;
  timerFontOptions: {
    value: string;
    label: keyof typeof TimerStyleFontOptions;
  }[];
};

export const AppStaticData: IAppDefaultData = {
  tabs: [
    {
      id: "content",
      content: "Content",
      accessibilityLabel: "set the content of the timer",
      panelID: "timer-content",
    },
    {
      id: "style",
      content: "Style",
      accessibilityLabel: "set the style of the timer",
      panelID: "timer-style",
    },
    {
      id: "placement",
      content: "Placement",
      accessibilityLabel: "set the placement of the timer",
      panelID: "timer-placement",
      measuring: true,
    },
  ],
  languageOptions: Object.entries(SupportedTranslationLanguage).map(
    ([key, value]) => ({
      value: key as keyof typeof SupportedTranslationLanguage,
      label: value,
    }),
  ),
  onceTimerEndsOptions: Object.entries(OnceEndsTimer).map(([key, value]) => ({
    label: key as keyof typeof OnceEndsTimer,
    value: value as OnceEndsTimerValue,
  })),
  daysOfWeekOptions: Object.keys(DaysOfWeeks)
    .filter((key) => !isNaN(Number(DaysOfWeeks[key as any])))
    .map((key) => ({
      label: key,
      value: DaysOfWeeks[key as keyof typeof DaysOfWeeks] as number,
    })),
  recurringTimerStartOptions: Object.entries(ReccuringTimerStartOptions).map(
    ([key, value]) => ({
      label: key as keyof typeof ReccuringTimerStartOptions,
      value: value,
    }),
  ),
  recurringTimerEndsOptions: Object.entries(ReccuringTimerEndsOptions).map(
    ([key, value]) => ({
      label: key as keyof typeof ReccuringTimerEndsOptions,
      value: value,
    }),
  ),
  defaultTranslationLanguageState: {
    language: "en",
    title: "",
    subHeading: "",
    timerLabel: {
      day: "Days",
      hour: "Hrs",
      minute: "Mins",
      second: "Secs",
    },
  },
  style: {
    cardStyle: {
      borderColor: "red",
      borderRadius: 10,
      borderSize: 1,
      cardBackgroundGradientAngle: "45deg",
      cardBackgroundGradientEnd: "red",
      cardBackgroundGradientStart: "blue",
      isGradiantBackground: true,
      cardBackgroundColor: "#ffffff",
      insideBottom: 10,
      insideTop: 10,
      outsideBottom: 10,
      outsideTop: 10,
    },
    template: "custom",
    typoGraphy: {
      font: "Arial",
      titleColor: "red",
      titleSize: 10,
      timerColor: "red",
      timerLegendColor: "red",
      timerLegendSize: 10,
      timerSize: 10,
      subHeadingColor: "red",
      subHeadingSize: 10,
    },
    position: "",
  },
  timerTemplateOptions: Object.entries(TimerTemplate).map(([key, value]) => ({
    value: key as keyof typeof TimerTemplate,
    label: value,
  })),
  timerFontOptions: Object.entries(TimerStyleFontOptions).map(
    ([key, value]) => ({
      label: key as keyof typeof TimerStyleFontOptions,
      value: value,
    }),
  ),
};
